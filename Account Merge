class Solution {
  public:
    class DSU{
        public:
        vector<int>rank,rep;
        DSU(int n){
            for(int i=0;i<n;i++){
                rank.push_back(1);
                rep.push_back(i);
            }
        }
        int find(int x){
            if(rep[x]==x)return x;
            return rep[x]=find(rep[x]);
        }
        void Union(int x,int y){
            int repX=find(x);
            int repY=find(y);
            
            if(rank[repX]>=rank[repY]){
                rank[repX]+=rank[repY];
                rep[repY]=repX;
            }else{
                rank[repY]+=rank[repX];
                rep[repX]=repY;
            }
        }
    };
    vector<vector<string>> accountsMerge(vector<vector<string>> &accounts) {
        unordered_map<string,int>mp;
        int per=0,n=accounts.size();
        DSU* obj=new DSU(n);
        for(vector<string>v:accounts){
            for(int i=1;i<v.size();i++){
                string mail=v[i];
                if(mp.find(mail)!=mp.end()){
                    obj->Union(per,mp[mail]);
                }
                else mp[mail]=per;
            }
            per++;
        }
        vector<string>t[n];
        for(auto it:mp){
            t[obj->find(it.second)].push_back(it.first);
        }
        vector<vector<string>>ans;
        for(int i=0;i<n;i++){
            if(t[i].size()==0)continue;
            vector<string>temp;
            temp.push_back(accounts[i][0]);
            sort(t[i].begin(),t[i].end());
            for(string s:t[i])temp.push_back(s);
            ans.push_back(temp);
        }
        return ans;
    }
};
