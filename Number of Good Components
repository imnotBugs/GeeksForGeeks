class Solution {
  public:
    void dfs(int node,vector<int>&vis,vector<int>adj[],vector<int>&portion){
        vis[node]=1;
        for(auto it:adj[node]){
            if(!vis[it]) dfs(it,vis,adj,portion);
        }
        portion.push_back(node);
    }
    int findNumberOfGoodComponent(int e, int v, vector<vector<int>> &edges) {
        // code here
        vector<int>vis(v+1,0);
        vector<int>adj[v+1];
        for(auto it:edges){
            int u=it[0];
            int v=it[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        int ans=0;
        for(int i=1;i<=v;i++){
            if(!vis[i]){
                vector<int>portion;
                dfs(i,vis,adj,portion);
                ans++;
                int sz=portion.size();
                for(auto it:portion){
                    //condition for interconnected
                    if(adj[it].size()!=sz-1){
                        ans--;
                        break;
                    }
                }
            }
        }
        retur ans;
    }
};
